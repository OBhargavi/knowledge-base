. Datatypes in javascript:
    1. string
    2. number - decimal, float, double
    3. boolean
    4. undefined
    5. null
    6. symbols
. typeof is used to find the type of the variable
. template string is the ES6 feature '${}' put any one line javascript code here. It will be evaluated as the javascript expression.
. back-tick are used to have multiple line html code in a javascript file
.  function declaration types:
    1. function greet(){ }
    2. const test = function(x=3){};
    3. iifes- immidiatley invoked function expression: (function(){})();
. cars = []
    cars.forEach(function(element, index, array){});
. cars = {
  model: 2019,
  name: 'bmw',
  price: '4500000'
};
 for( element in cars){
  console.log(`${element} : ${cars[element]}');
 }
. window or browser is the global object. Hence there is no prefix of windows on all the commands. It is implicit.
. alert, prompt - takes input, confirm
. window.location object which gives you info about the current systems/browser related data. window.location.search will give everything in the url post the '?' including the ?
. window.history.go(-1) window.history.go(+2)
. window.navigator gives you the control to the browser
.  use let never var and use const if value is not gonna change
  var get overridden in the block scope i.e if(){} or for(){}
. put <script></script> at the end of the body tag before closing it</body>
. Array.from(htmlCollection)
. document.querySelector('#id'), document.querySelector('.class'), document.querySelector('element/selector') like h5
. querySelector gets only the first one if there are multiple matches
. document.querySelectorAll('#id') and other variations can be seen above
. local storage only stores strings (JSON.stringify() and JSON.parse())
. session is same as the local storage but stays until the browser is closed where as the local storage is cleared if manually cleared or programatically
. function Person(){
  this.name = 'Abhishek';
  this.age = '28';
}
. put the methods in the Person.prototype.calculateAge = function(){}
. ES6+ has class and handles the prototype and everything constructor is explicitly called constructor(){} in javascript
. api client sends ajax request to AJAX-Engine and that send the request to the backend server and gets response and sends it to the client
. AJAX-Engine uses xmlhttprequest to communicate with the server
. fetchApi is part of the javascript library
. setTimeout(function(){},2000ms)
. To use promise-then pattern
  function test(){
  return new Promise(function(resolve, reject){
    if(success){
    resolve();
    } else{
      reject('error')
    }
  })
  }
  test().then(method).catch(function(error){
    console.log('error' + error);
  });
. fetchApi is the newest standard for http requests
    fetch('http://blahblah').
      then(function(res){
        return res.json();
      })
. fetch returns a promise
. arrow functions
. async await ES6+
. async on a function will make the return as a promise hence we need to use the returned data in the calling function using then and catch
. await keyword can be used on a variable once that is resolved only then the value of the variable is assigned to the left side of the operator
. await is used on the promise variables which will resolve
. when u put function* test(){} it tells this is a generator function
. symbols
    anything you pass inside an symbol() it will be unique
    const a = symbol('test');
    const b = symbol('test');
    always returns a new object
    if(symbol() === symbol()) return false
    JSON. stringify() ignores symbols() and symbols() are not enumerable in for in loop
. Destructuring
    [a,b] = [100,200];
    [a,b,...c] = [100, 200, 300, 400, 500, 600]
. '...test' is called rest operator which takes and stores the leftover values

. const person = {
  name: 'abhi',
  job: 'developer',
  place: 'bangalore',
  company: 'deloitte',
  testMethod: function(){}
}
  {name, job, testMethod} = person;
  testMethod();
. Map ES6+
  const testMap = new Map();
    for(let [key, value] of testMap){}
    for(let key of testMap.keys()){}
    for(let values of testMap.values()){}
    testMap.forEach((value,key)=>{});
    const array = Arrays.from(testMap);
. Set ES6+
  const testSet = new Set();
  for(let item of testSet){}
  const array = Arrays.from(testSet);
