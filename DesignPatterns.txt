1.  SOLID
		S -> Single responsibility principle
		O -> Open for extension and closed for modification
		L -> Liskov's principle ()
		I -> Interface hierarchy
		D -> Dependency Inversion
2. Creational Design Pattern:
		a. Builder Pattern:
				. Building complex objects
				. Finally will have one method to consolidate build(), execute() etc
				. Returns the reference of the calling object (this)
		b. Factory Pattern:
				. Make the constructor as private of the main Class
				. Have a FactoryClass which has static method to create different versions of the Class
				. This class can reside inside the Class as an inner-class or Outside the class
		   Abstract Factory Pattern:
				. Is used when there are multiple factories and multiple implementation based on the versions of objects being created
		c. Prototype Pattern:
				. Prototype is all about copying
				. A partially or fully Initialized object that you copy(deep clone) and make use of it
				. Not to construct an object from scratch
				. Make a deep copy of an existing object and build up on it
				. Have a copy constructor which does the deep copy of the passed object and returns the new object created from the passed object
				. We can get a deep copy using serializable interface because Serializable creates a copy by value hence creating a deep copy
		d. Singleton Pattern:
				. A component which is instantiated only once
				. To avoid serialization to create a new object of a singleton class we need to create the method readResolve() and return INSTANCE
				. Have a private constructor which throws an exception. In a static block call the private constructor and catch the exception and also assign the value to a local variable.
				. Have a static method get instance and return the above created object
				. We can use ENUM for creation of a singleton but serialization doesn't work as expected. Hence we can use this if we don't want to save state and Enum cannot be inherited
				. Making all the instance variable as static then this becomes unintutievely Singleton.   this is called a mono-state Singleton
				. Multiton is a flavour of singleton which allows finite set of object of class
3. Structural Design pattern:
		a. Adapter Pattern:
