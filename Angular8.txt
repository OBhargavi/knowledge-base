1. Data Binding
	a. String literal
	b. property binding
	c. event binding
	d. 2 way data binding with directieves

2. Directieves
	a. Components are directive with templates
	b. There are 2 types of directieves : 
		a. Structural directive (*ngFor, *ngIf)
		b. Attribute directieve (ngClass, ngStyle) these are directive with same propertyname to add property binding
3. Augury to understand Applications at runtime
4. By Default All properties inside a component are accessible only inside a component
5. Component communication : 
	@Input() -> Parent to child
	@Output() -> CHild to parent EventEmmiter
6. View Encapsulation
	@Component({
	encapsulation: ViewEncapsulation.NONE (EMULATED is the default)
	})
7. Local References where the id with a '#' is given to an html tag and can be used anywhere with that reference id it gives the the entire tag or element
 <input type="text" #inputElement/>
8. @ViewChild('referenceId') to get access to local reference and it get a type ElementRef and calling nativeElement on this gives the html element
8. (add { static: true } as a second argument) needs to be applied to ALL usages of @ViewChild() and @ContentChild()  
IF you plan on accessing the selected element inside of ngOnInit().
If you DON'T access the selected element in ngOnInit (but anywhere else in your component), set static: false instead!
9. Anything u place between the openeing and closing of ur custom component is lost this is a default behaviour
10. <ng-content></ng-content> servers the above purpose
11. LifeCycleHooks in Angular
	a. ngOnChanges() - 
	b. ngOnInit() -
	c. ngDoCheck() -
	d. ngAfterContent()- 
	e. ngAfterViewInit() -
	f. ngDestroy() - 
12. @ContentChild if the content being added using <ng-content> and u want to use the reference passed on from another component then use this.
13. We cannot have more than one structural directive on an element
14. To create custom directive we need to get the ElementRef injected in the constructor along with the Renderer2 
15. HostListner is the way to capture any event that happens on the component it is on including the custom event we have created
16. HostBinding is the nice alternative for the Renderer as this can bind to a property and can be convineant to make changes
17. [ngSwitch]=""
		*ngSwitchCase="5"
18. Provider array in the component declaration tells the Angular to provide the service or dependecy
19. Service Injector is hierarchical in Angular unless we override the service
20. A recieveing service must have a Decorator as @Injectable() [not which u want to inject but where u want to inject]
21. @Injectable({providedIn: 'root'})
	export class MyService { ... }

22. Routing
		a. Have a constant in the appmodule above @NgModule with const myRoutest:Routes = [{path: '', component: },{path: '', component: } ] . Routes takes array of object of type mentioned.
			For child routes myRoutest:Routes = [{path: '', component: , children:
			[{path: '', component: }, {path: '', component: }] },
			{path: '', component: } ]
			
			{path: '**', redirectTo: 'pathOf PageNotFound' } // This should always be at the last
			
		b. Have RouterModule.forRoot(myRoutest) in the imports of the module
		c. Special directive <router-outlet></router-outlet>
		d. special directive for routing  <a routerLink>
		e. routerLinkActive is a directive used to mark the active route currently this takes a class. This should be added like below
			<li routerLinkActive="class"><a></li>
		f. use routerLinkActiveOption = "{exact: true}" in addition to routerLinkActive="class" for home as the '/' is always true.
23. If we want to route programatically we can inject Router in the constructor and use
	this.router.navigate(['/server']) 
	in the method we want to use it in.
24. these links are relative to the root i.e. localhost:4200. Hence to give from where this shold to relative we need to pass an extra paremeter 
	this.router.navigate(['/server'], {}relativeTo: ActivatedRoute) Activated route gives currently active route which loaded this component.
25. Using pathparam 
	{path: '/user/:id', component: } here id is a path param it ll accept anything after user as an id and ':' means that its a dynamic input.
	TO get access to the path param using Activated route mentioned in the point 24 
	this.route.snapshot.params['id']
26. If a path is already loaded and then only if the path param changes then the Angular will not realod the component  hence we have to use and observale on the
 this.route.params.subscribe((params: Params)=>{
 will get access to all params here
 }).This component if not reloaded from same component then there is no need to use this above subscribe method
 
27. Subscribe() is not tied to the component it is a separte functionality u got to destroy in the ngOnDestroy()
28. use query param with the routerlink to add queryparam to ur url
	[routerLink] = "['/servers', 5, edit]"
	[queryPrams] = "{allowEidt: '1'}"
	This will result in  : localhost:4200/servers/5/edit?allowEidt=1
	fragmanet for hash
29. ActivatedROute gives the vale of the queryParams and fragment as well and we have observables for these as well
30. queryParamsHandlig: 'preserve'/'merge' to preserve the queryParams on uuse of router.Navigate
31. AuthGaurd impelements CanActivate{
	canActivate(){
	}
}
	{path: '', component: , canActivate: [AuthGaurd]}
32.  For child can activate 
 AuthGaurd impelements CanActivate, CanActivateChild{
	canActivate(){
	}
	canActivateChild(){
	}
}
if used  {path: '', component: , canActivateChild: [AuthGaurd]} then oly child components are gaurded and not parent
33. can use pipes on the Observables to apply maps, filters on them so that we can subscribe only the refined data.
34. Subjects are used when cross component event are to be captured via the service
35. Two types of Form Approach in the Angular
	a. Template-Driven
	b. Reactive approach