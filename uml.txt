. UML is a graphical Notation to communicate the design of a software system 
. Mapping requirements to Technical Descriptions: 
	a. Title - Actions/ Functionality to be performed
	b. Actor - The system/person who uses the functionality
	c. Scenario - What and how a system works in different scenarios(Avoid technical details)
	
	. User Story is alternative for the Scenario Like As a user I want to do certain thing
	. An Epic is one which can be split into multiple smaller user stories
. Popular UML diagram types are: 
	a. Functional 
		. Usecase Diagram: funcionality of a system from the user standpoint
	b. Structural 
		. Class Diagram: this is used to design the class interactions
			It is represented in a rectangular box with three compartments namely:
				a. ClassName: It should be Starting with capitals and it should be Singular and should be a Noun
				b. Attributes: It has the attributes. It should be in camel case and type is mentioned on the right separated by a colon
				c. Operations: It has the methods and arguments arguments are same as attributes but in the method parantheses. 
							   If it returns something then the return type is mentioned after the method separated by colon
			Visibilities:
				a. '+' - public visibility
				b. '-' - private visibility
				c. '#' - protected visibility(Meaning accessible by the child classes as well)
				d. '~' - package visibility
			Association: 
				. It is way of informing there is a relation between two classes ('*' many, '1' single, '01' may or may not have). 
					That is it uses the attributes of the other class. It is has-a relationship.
				. Solid line with an open head arrow at the oposite of owner's end
			Generalisation: 
				. It is basically inheritance (dependency) is-a relationship
				. Solid line with hollow arrow head, arrow pointing to the parent
			Dependency: 
				. When a class has a reference to an other class may be through a member function parameter.
				. It is denoted by a dotted line with an open arrow. references to relationship
			Realization:
				. Is impementing an interface
				. Dotted arrow with an hollow arrow head
			Aggregation:
				. It is same as the Association
				. It is denoted by a solid line with a hollow dimond on the owner's end
			Composition:
				. It is the Ownership type of relation where the subclasses live and die inside the Owner class like the subclasses.
				. It is represented by the solid line with a field diamond on the owners end
	c. Dynamic
		. Sequence Diagram: Interaction between objects. Dynamic behaviour of a system